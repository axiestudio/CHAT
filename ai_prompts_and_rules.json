{
  "prompts": {
    "intent_analysis": "\nYou are an expert AxieStudio flow architect. Analyze this user request and extract:\n\n1. PRIMARY USE CASE: {use_cases}\n2. REQUIRED CAPABILITIES: {capabilities}\n3. PREFERRED MODELS: {models}\n4. DATA SOURCES: {data_sources}\n5. COMPLEXITY LEVEL: simple/medium/complex\n\nAvailable use cases: {available_use_cases}\nAvailable capabilities: {available_capabilities}\n\nUser request: \"{user_input}\"\n\nRespond with JSON containing the analysis.\n",
    "component_selection": "\nYou are selecting optimal AxieStudio components. Based on the analysis:\n\nINTENT: {intent_analysis}\nAVAILABLE COMPONENTS: {optimized_components}\nSIMILAR FLOWS: {similar_flows}\n\nSelect components in execution order. Rules:\n1. Always start with input component (ChatInput, TextInput, etc.)\n2. Include appropriate AI model (OpenAI, Anthropic, etc.)\n3. Add processing components as needed\n4. Always end with output component (ChatOutput, TextOutput, etc.)\n5. Ensure components can connect (matching input/output types)\n\nRespond with JSON array of component names in order.\n",
    "flow_generation": "\nCreate complete AxieStudio flow JSON with these components: {components}\n\nRequirements:\n- Each component needs unique ID and proper positioning\n- Create edges connecting compatible outputs to inputs\n- Follow AxieStudio JSON format exactly\n- Include all necessary template fields\n\nComponent details: {component_details}\nSimilar flow examples: {similar_flows}\n\nGenerate complete flow JSON structure.\n"
  },
  "selection_rules": {
    "basic_chat": [
      "ChatInput",
      "OpenAIModel",
      "ChatOutput"
    ],
    "document_qa": [
      "ChatInput",
      "FileComponent",
      "TextSplitter",
      "OpenAIEmbeddings",
      "ChromaDB",
      "OpenAIModel",
      "ChatOutput"
    ],
    "agent_tools": [
      "ChatInput",
      "Agent",
      "OpenAIModel",
      "WebSearchTool",
      "ChatOutput"
    ],
    "rag_system": [
      "FileComponent",
      "TextSplitter",
      "OpenAIEmbeddings",
      "ChromaDB",
      "ChatInput",
      "OpenAIModel",
      "ChatOutput"
    ],
    "data_processing": [
      "FileComponent",
      "DataProcessor",
      "TextSplitter",
      "OutputComponent"
    ]
  }
}